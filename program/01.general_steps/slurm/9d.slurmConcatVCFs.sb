#!/bin/bash

##########################################################
########### SBATCH Lines for Resource Request ############
##########################################################

# Wall time (e.g. "minutes", "hours:minutes:seconds", "days-hours", "days-hours:minutes"): (same as -t)
#SBATCH --time=48:00:00
#
# Number of nodes needed: could be an exact number or a range of nodes (same as -N)
#SBATCH --nodes=1
#
# Processors per task: number of CPUs (or cores) per task (same as -c)
#SBATCH --cpus-per-task=8
#
# Tasks per node:
#SBATCH --ntasks-per-node=1
#
# Memory per node: memory required per allocated CPU (or core) - amount of memory (in bytes)
#SBATCH --mem=200G
##########################################################

#
#
#

eval "$(conda shell.bash hook)"
conda activate ivdp
conda activate --stack r-env4.0
export CONDA_DEFAULT_ENV=$CONDA_DEFAULT_ENV
PAR_AUX=$OUTPUT_DIR/ivdp_"$OUTPUT_NAME"/logSlurm/"${ANALYSIS_ID}"_parAuxiliar2.txt

export IVDP_DIR=$(cat $PAR_AUX | grep "|IVDP_DIR" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export INPUT_DIR=$(cat $PAR_AUX | grep "|INPUT_DIR" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export OUTPUT_DIR=$(cat $PAR_AUX | grep "|OUTPUT_DIR" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export OUTPUT_NAME=$(cat $PAR_AUX | grep "|OUTPUT_NAME" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export LIST_SAMPLES=$(cat $PAR_AUX | grep "|LIST_SAMPLES" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export ANALYSIS=$(cat $PAR_AUX | grep "|ANALYSIS" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export EXTENSION_SE=$(cat $PAR_AUX | grep "|EXTENSION_SE" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export EXTENSION_PE1=$(cat $PAR_AUX | grep "|EXTENSION_PE1" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export EXTENSION_PE2=$(cat $PAR_AUX | grep "|EXTENSION_PE2" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export ASSEMBLY=$(cat $PAR_AUX | grep "|ASSEMBLY" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export REFERENCE=$(cat $PAR_AUX | grep "|REFERENCE" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export VARIANTS=$(cat $PAR_AUX | grep "|VARIANTS" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export ANNOTATION=$(cat $PAR_AUX | grep "|ANNOTATION" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export STEP_QC_TRIM=$(cat $PAR_AUX | grep "|STEP_QC_TRIM" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export STEP_ALIGNMENT=$(cat $PAR_AUX | grep "|STEP_ALIGNMENT" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export STEP_GENECOUNT=$(cat $PAR_AUX | grep "|STEP_GENECOUNT" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export STEP_MDUP=$(cat $PAR_AUX | grep "|STEP_MDUP" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export STEP_BQSR=$(cat $PAR_AUX | grep "|STEP_BQSR" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export STEP_VAR_CALL=$(cat $PAR_AUX | grep "|STEP_VAR_CALL" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export STEP_GVCF_TO_VCF=$(cat $PAR_AUX | grep "|STEP_GVCF_TO_VCF" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export STEP_VCF_FILTER=$(cat $PAR_AUX | grep "|STEP_VCF_FILTER" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export MDUP_PROGRAM=$(cat $PAR_AUX | grep "|MDUP_PROGRAM" | cut -d "=" -f 2- | cut -d "#" -f 1 | tr "," "\n")
export BQSR_PROGRAM=$(cat $PAR_AUX | grep "|BQSR_PROGRAM" | cut -d "=" -f 2- | cut -d "#" -f 1 | tr "," "\n")
export STATS_ALIGNMENT=$(cat $PAR_AUX | grep "|STATS_ALIGNMENT" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export CALL_BY_CHROM=$(cat $PAR_AUX | grep "|CALL_BY_CHROM" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export BP_BY_CHROM=$(cat $PAR_AUX | grep "|BP_BY_CHROM" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export CHROM_SET=$(cat $PAR_AUX | grep "|CHROM_SET" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export INCLUDE_CHROM_X=$(cat $PAR_AUX | grep "|INCLUDE_CHROM_X" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export INCLUDE_CHROM_Y=$(cat $PAR_AUX | grep "|INCLUDE_CHROM_Y" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export INCLUDE_CHROM_MT=$(cat $PAR_AUX | grep "|INCLUDE_CHROM_MT" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export ADAPTER_TRIMMOMATIC=$(cat $PAR_AUX | grep "|ADAPTER_TRIMMOMATIC" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export MIN_READ_LENGTH=$(cat $PAR_AUX | grep "|MIN_READ_LENGTH" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export MAX_READ_LENGTH=$(cat $PAR_AUX | grep "|MAX_READ_LENGTH" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export DOWNSAMPLING_FASTQ=$(cat $PAR_AUX | grep "|DOWNSAMPLING_FASTQ" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export DOWNSAMPLING_BAM=$(cat $PAR_AUX | grep "|DOWNSAMPLING_BAM" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export MIN_DEPTH=$(cat $PAR_AUX | grep "|MIN_DEPTH" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export MAF=$(cat $PAR_AUX | grep "|MAF" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export MISSING=$(cat $PAR_AUX | grep "|MISSING" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export BATCH=$(cat $PAR_AUX | grep "|BATCH" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export KEEP_LOG=$(cat $PAR_AUX | grep "|KEEP_LOG" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export KEEP_INTERMEDIATE_DATA=$(cat $PAR_AUX | grep "|KEEP_INTERMEDIATE_DATA" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export TYPE=$(cat $PAR_AUX | grep "|TYPE" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export PARAMETERS=$(cat $PAR_AUX | grep "|PARAMETERS" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)

export CHROM_NAME=$(cat $PAR_AUX | grep "|CHROM_NAME" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export CHROM_SIZE=$(cat $PAR_AUX | grep "|CHROM_SIZE" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)
export CHROM_POSITIONS=$(cat $PAR_AUX | grep "|CHROM_POSITIONS" | sed -e "s/[[:space:]]\+//g" | cut -d "=" -f 2- | cut -d "#" -f 1)

export GENECOUNT_PROGRAM=$(cat $PAR_AUX | grep "|GENECOUNT_PROGRAM" | cut -d "=" -f 2- | cut -d "#" -f 1 | tr "," "\n")
export FEATURE_TYPE=$(cat $PAR_AUX | grep "|FEATURE_TYPE" | cut -d "=" -f 2- | cut -d "#" -f 1 | tr "," "\n")
export COMBINE_VCF=$(cat $PAR_AUX | grep "|COMBINE_VCF" | cut -d "=" -f 2- | cut -d "#" -f 1 | tr "," "\n")
export ALIGNER_PROGRAM=$(cat $PAR_AUX | grep "|ALIGNER_PROGRAM" | cut -d "=" -f 2- | cut -d "#" -f 1 | tr "," "\n")
export CALLER_PROGRAM=$(cat $PAR_AUX | grep "|CALLER_PROGRAM" | cut -d "=" -f 2- | cut -d "#" -f 1 | tr "," "\n")


export THREADS=$SLURM_CPUS_PER_TASK
wait


#
#
#

echo
echo "#@#############################################################"
echo "#@                    IVDP ANALYSIS: $ANALYSIS_ID"
echo "#@                         INPUT PARAMETERS"
echo "#@   INPUT FODLER: $INPUT_DIR"
echo "#@   OUTPUT FOLDER: $OUTPUT_DIR"
echo "#@   NAME OF ANALYSIS: $OUTPUT_NAME"
echo "#@   TYPE OF ANALYSIS: $(if [[ $ANALYSIS == 1 ]]; then echo "WGS"; else echo "RNA-Seq"; fi) "
echo "#@   TYPE OF FILES: $(if [[ $TYPE == "se" ]]; then echo "Single-end"; else echo "Paired-end"; fi) "
echo "#@   LIST OF SAMPLES: $LIST_SAMPLES"
echo "#@"
echo "#@                   REFERENCE GENOME PARAMETERS"
echo "#@   NAME OF REFERENCE GENOME: $ASSEMBLY"
echo "#@   REFERENCE GENOME FILE: $REFERENCE"
echo "#@   VARIANTS REFERENCE GENOME FILE: $VARIANTS"
echo "#@   ANNOTATION REFERENCE GENOME FILE: $ANNOTATION"
echo "#@"
echo "#@                         PIPELINE STEPS"
echo "#@   QUALITY CONTROL AND ADAPTER TRIMMING: $STEP_QC_TRIM"
echo "#@   ALIGMNMENT: $STEP_ALIGNMENT"
echo "#@   GENE COUNTS: $STEP_GENECOUNT"
echo "#@   MARK DUPLICATED READS: $STEP_MDUP"
echo "#@   BASE QUALITY SCORE RECALIBRATION: $STEP_BQSR"
echo "#@   VARIANT CALLING: $STEP_VAR_CALL"
echo "#@   CONVERT GVCF TO VCF: $STEP_GVCF_TO_VCF"
echo "#@   FILTER VCF: $STEP_VCF_FILTER"
echo "#@"
echo "#@                        OTHER PARAMETERS"
echo "#@   ALIGNER PROGRAMS: " $ALIGNER_PROGRAM
echo "#@   VARIANT CALLING PROGRAMS: " $CALLER_PROGRAM
echo "#@   GENE COUNT PROGRAM: " $GENECOUNT_PROGRAM
echo "#@   FEATURE TYPE FOR GENE COUNT: " $FEATURE_TYPE
echo "#@"
echo "#@   ADAPTERS FOR TRIMMING: $ADAPTER_TRIMMOMATIC"
echo "#@   MINIMUM READ LENGTH: $MIN_READ_LENGTH"
echo "#@   MAXIMUN READ LENGTH: $MAX_READ_LENGTH"
echo "#@   MINIMUN DEPTH FOR FILTERED LOCI: $MIN_DEPTH"
echo "#@   MINIMUN ALLELE FREQUENCY FOR FILTERED LOCI: $MAF"
echo "#@   MAXIMUN GENOTYPE MISSING RATE: $MISSING"
echo "#@   COMBINING VARIANTS FROM DIFFERENT VCFs: " $COMBINE_VCF
echo "#@"
if [[ "$STEP_VAR_CALL" == "yes" && "$BP_BY_CHROM" != "all" ]]; then echo "#@   CHUNKS BY CHROMOSOME (FOR VARIANT CALLING): ${BP_BY_CHROM}bp"; fi
if [[ "$DOWNSAMPLING_FASTQ" != 0 ]]; then echo "#@   DOWNSAMPLING COVERAGE (FASTQ): $DOWNSAMPLING_FASTQ"; fi
if [[ "$DOWNSAMPLING_BAM" != 0 ]]; then echo "#@   DOWNSAMPLING COVERAGE (BAM): $DOWNSAMPLING_BAM"; fi
echo "#@   NUMBER OF THREADS: $THREADS"
echo "#@   KEEP LOG FILES: $KEEP_LOG"
echo "#@   KEEP TRIMMED FASTQ AND BAM FILES: $KEEP_INTERMEDIATE_DATA" 
echo "#@"
D1=$(date "+%D    %T")
echo "#@    Date and Time: $D1"
echo "#@#############################################################"

START_IVDP=$(date +%s)

for ALIGNER in $ALIGNER_PROGRAM; do
   export ALIGNER=$ALIGNER
   for CALLER in $CALLER_PROGRAM; do
      export CALLER=$CALLER
      source "$IVDP_DIR"/program/01.general_steps/folders.sh
      export VCF_TMP=$(echo $VCF_RAW)/"$ALIGNER"_"$CALLER"_"${ANALYSIS_ID}"
      wait
 
      ### MERGE CHR FROM BCFTOOLS, FREEBAYES, FREEBAYES-PARALLEL, GATK4HAPLOTYPECALLER, VARSCAN2, PLATYPUS     
      if [[ $CALLER != "gatk4CombineGVCFs" && $CALLER != "gatk4GenomicsDBImport" && $CALLER != "gatk3" ]]; then
         
         ##### BP_BY_CHROM == all #####
         if [[ "$BP_BY_CHROM" == "all" ]]; then
            # Get head of vcf
            cat $(ls $VCF_TMP/"$ALIGNER"_"$CALLER"_*_raw.vcf | head -1) | grep "^#" > $VCF_TMP/"$ALIGNER"_"$CALLER"_raw.vcf
            wait
 
            # Join vcfs
            for chr in $(cat $CHROM_NAME); do
               grep -v '^#' $VCF_TMP/"$ALIGNER"_"$CALLER"_"${chr}"_raw.vcf >> $VCF_TMP/"$ALIGNER"_"$CALLER"_raw.vcf
            done
            wait
            
            # Index vcf
            bgzip -f -@ $THREADS $VCF_TMP/"$ALIGNER"_"$CALLER"_raw.vcf
            bcftools index -f -t --threads $THREADS $VCF_TMP/"$ALIGNER"_"$CALLER"_raw.vcf.gz
            wait
            
            if [[ "$CALLER" == "bcftools" || "$CALLER" == "platypus" ]]; then
               # Calculate AF INFO
               # https://www.biostars.org/p/180894/
               
               bcftools +fill-tags -Oz -o $VCF_TMP/tmp.vcf.gz $VCF_TMP/"$ALIGNER"_"$CALLER"_raw.vcf.gz
               wait
               
               rm $VCF_TMP/"$ALIGNER"_"$CALLER"_raw.vcf.gz
               mv $VCF_TMP/tmp.vcf.gz $VCF_TMP/"$ALIGNER"_"$CALLER"_raw.vcf.gz
               wait
               
               bcftools index -f -t --threads $THREADS $VCF_TMP/"$ALIGNER"_"$CALLER"_raw.vcf.gz
               wait
            fi
            wait
         
            mv $VCF_TMP/"$ALIGNER"_"$CALLER"_raw.vcf* $VCF_RAW
            rm -r $VCF_TMP 2> /dev/null
            wait
         
            # Add rsIDs to VCF 
            if [[ "$VARIANTS" != "none" ]]; then
               D=$(date "+%D    %T")
               echo "# Add rsIDs: $D #"
               bcftools annotate --threads $THREADS -a $VARIANTS -c ID -Oz -o $VCF_RAW/"$ALIGNER"_"$CALLER"_raw_tmp.vcf.gz $VCF_RAW/"$ALIGNER"_"$CALLER"_raw.vcf.gz
               mv $VCF_RAW/"$ALIGNER"_"$CALLER"_raw_tmp.vcf.gz $VCF_RAW/"$ALIGNER"_"$CALLER"_raw.vcf.gz
               bcftools index -f -t --threads $THREADS $VCF_RAW/"$ALIGNER"_"$CALLER"_raw.vcf.gz
            fi
            wait

            # Add chrom:pos to missing IDs
            D=$(date "+%D    %T")
            echo "# Add chrom:pos to missing IDs: $D #"
            bcftools annotate --threads $THREADS --set-id +'%CHROM\:%POS' \
            -Oz -o $VCF_RAW/"$ALIGNER"_"$CALLER"_raw_tmp.vcf.gz \
            $VCF_RAW/"$ALIGNER"_"$CALLER"_raw.vcf.gz
            mv $VCF_RAW/"$ALIGNER"_"$CALLER"_raw_tmp.vcf.gz $VCF_RAW/"$ALIGNER"_"$CALLER"_raw.vcf.gz
            bcftools index -f -t --threads $THREADS $VCF_RAW/"$ALIGNER"_"$CALLER"_raw.vcf.gz 2> /dev/null
            wait

            # Annotation with snpEff
            if [[ "$ANNOTATION" != "none" ]]; then
               D=$(date "+%D    %T")
               echo "# Annotation with snpEff: $D #"
               $IVDP_DIR/program/08.vcf_annotation/snpEff_vcf.sh > /dev/null 2>&1
            fi
            wait
      

         ##### BP_BY_CHROM != all #####
         else
            # Get head of vcf
            cat $(ls $VCF_TMP/"$ALIGNER"_"$CALLER"_*_raw.vcf | head -1) | grep "^#" > $VCF_TMP/"$ALIGNER"_"$CALLER"_raw.vcf
            wait
 
            # Join vcfs
            for position in $(cat $CHROM_POSITIONS); do
               grep -v '^#' $VCF_TMP/"$ALIGNER"_"$CALLER"_"${position}"_raw.vcf >> $VCF_TMP/"$ALIGNER"_"$CALLER"_raw.vcf
            done
            wait
            
            # Index vcf
            bgzip -f -@ $THREADS $VCF_TMP/"$ALIGNER"_"$CALLER"_raw.vcf
            bcftools index -f -t --threads $THREADS $VCF_TMP/"$ALIGNER"_"$CALLER"_raw.vcf.gz
            wait
            
            if [[ "$CALLER" == "bcftools" || "$CALLER" == "platypus" ]]; then
               # Calculate AF INFO
               # https://www.biostars.org/p/180894/
               
               bcftools +fill-tags -Oz -o $VCF_TMP/tmp.vcf.gz $VCF_TMP/"$ALIGNER"_"$CALLER"_raw.vcf.gz
               wait
               
               rm $VCF_TMP/"$ALIGNER"_"$CALLER"_raw.vcf.gz
               mv $VCF_TMP/tmp.vcf.gz $VCF_TMP/"$ALIGNER"_"$CALLER"_raw.vcf.gz
               wait
               
               bcftools index -f -t --threads $THREADS $VCF_TMP/"$ALIGNER"_"$CALLER"_raw.vcf.gz
               wait
            fi
            wait
            
            mv $VCF_TMP/"$ALIGNER"_"$CALLER"_raw.vcf* $VCF_RAW
            rm -r $VCF_TMP 2> /dev/null
            wait
         
            # Add rsIDs to VCF 
            if [[ "$VARIANTS" != "none" ]]; then
               D=$(date "+%D    %T")
               echo "# Add rsIDs: $D #"
               bcftools annotate --threads $THREADS -a $VARIANTS -c ID -Oz -o $VCF_RAW/"$ALIGNER"_"$CALLER"_raw_tmp.vcf.gz $VCF_RAW/"$ALIGNER"_"$CALLER"_raw.vcf.gz
               mv $VCF_RAW/"$ALIGNER"_"$CALLER"_raw_tmp.vcf.gz $VCF_RAW/"$ALIGNER"_"$CALLER"_raw.vcf.gz
               bcftools index -f -t --threads $THREADS $VCF_RAW/"$ALIGNER"_"$CALLER"_raw.vcf.gz
            fi
            wait

            # Add chrom:pos to missing IDs
            D=$(date "+%D    %T")
            echo "# Add chrom:pos to missing IDs: $D #"
            bcftools annotate --threads $THREADS --set-id +'%CHROM\:%POS' \
            -Oz -o $VCF_RAW/"$ALIGNER"_"$CALLER"_raw_tmp.vcf.gz \
            $VCF_RAW/"$ALIGNER"_"$CALLER"_raw.vcf.gz
            mv $VCF_RAW/"$ALIGNER"_"$CALLER"_raw_tmp.vcf.gz $VCF_RAW/"$ALIGNER"_"$CALLER"_raw.vcf.gz
            bcftools index -f -t --threads $THREADS $VCF_RAW/"$ALIGNER"_"$CALLER"_raw.vcf.gz 2> /dev/null
            wait
 
            # Annotation with snpEff
            if [[ "$ANNOTATION" != "none" ]]; then
               D=$(date "+%D    %T")
               echo "# Annotation with snpEff: $D #"
               $IVDP_DIR/program/08.vcf_annotation/snpEff_vcf.sh > /dev/null 2>&1
            fi
            wait

         fi            
 
 
      ##### MERGE CHR FROM GVCF MODE #####
      else
         
         ##### BP_BY_CHROM == all #####
         if [[ "$BP_BY_CHROM" == "all" ]]; then
         
            # Get head of vcf
            cat $(ls "$GVCF_RAW"/"$ALIGNER"_"$CALLER"/"$ALIGNER"_"$CALLER"_*_raw.vcf | head -1) | grep "^#" > "$GVCF_RAW"/"$ALIGNER"_"$CALLER"/"$ALIGNER"_"$CALLER"_raw.vcf
            wait
   
            # Join vcfs
            for chr in $(cat $CHROM_NAME); do
               grep -v '^#' "$GVCF_RAW"/"$ALIGNER"_"$CALLER"/"$ALIGNER"_"$CALLER"_"${chr}"_raw.vcf >> "$GVCF_RAW"/"$ALIGNER"_"$CALLER"/"$ALIGNER"_"$CALLER"_raw.vcf
            done
            wait
            
            # Index vcf
            bgzip -f -@ $THREADS "$GVCF_RAW"/"$ALIGNER"_"$CALLER"/"$ALIGNER"_"$CALLER"_raw.vcf
            bcftools index -f -t --threads $THREADS "$GVCF_RAW"/"$ALIGNER"_"$CALLER"/"$ALIGNER"_"$CALLER"_raw.vcf.gz
            wait
            
            
            if [[ $(bcftools view -H "$GVCF_RAW"/"$ALIGNER"_"$CALLER"/"$ALIGNER"_"$CALLER"_raw.vcf.gz | head -n 1000 | wc -l) == 0 ]]; then
               rm -r "$GVCF_RAW"/"$ALIGNER"_"$CALLER"/"$ALIGNER"_"$CALLER"_raw.vcf.gz*
               
            else
               mv "$GVCF_RAW"/"$ALIGNER"_"$CALLER"/"$ALIGNER"_"$CALLER"_raw.vcf* $VCF_RAW
               rm -r "$GVCF_RAW"/"$ALIGNER"_"$CALLER"/"$ALIGNER"_"$CALLER"_*_raw.vcf* 2> /dev/null
               wait
            
               # Add rsIDs to VCF 
               if [[ "$VARIANTS" != "none" ]]; then
                  D=$(date "+%D    %T")
                  echo "# Add rsIDs: $D #"
                  bcftools annotate --threads $THREADS -a $VARIANTS -c ID -Oz -o $VCF_RAW/"$ALIGNER"_"$CALLER"_raw_tmp.vcf.gz $VCF_RAW/"$ALIGNER"_"$CALLER"_raw.vcf.gz
                  mv $VCF_RAW/"$ALIGNER"_"$CALLER"_raw_tmp.vcf.gz $VCF_RAW/"$ALIGNER"_"$CALLER"_raw.vcf.gz
                  bcftools index -f -t --threads $THREADS $VCF_RAW/"$ALIGNER"_"$CALLER"_raw.vcf.gz
               fi
               wait
   
               # Add chrom:pos to missing IDs
               D=$(date "+%D    %T")
               echo "# Add chrom:pos to missing IDs: $D #"
               bcftools annotate --threads $THREADS --set-id +'%CHROM\:%POS' \
               -Oz -o $VCF_RAW/"$ALIGNER"_"$CALLER"_raw_tmp.vcf.gz \
               $VCF_RAW/"$ALIGNER"_"$CALLER"_raw.vcf.gz
               mv $VCF_RAW/"$ALIGNER"_"$CALLER"_raw_tmp.vcf.gz $VCF_RAW/"$ALIGNER"_"$CALLER"_raw.vcf.gz
               bcftools index -f -t --threads $THREADS $VCF_RAW/"$ALIGNER"_"$CALLER"_raw.vcf.gz 2> /dev/null
               wait

              # Annotation with snpEff
              if [[ "$ANNOTATION" != "none" ]]; then
                 D=$(date "+%D    %T")
                 echo "# Annotation with snpEff: $D #"
                 $IVDP_DIR/program/08.vcf_annotation/snpEff_vcf.sh > /dev/null 2>&1
              fi
              wait               
               
            fi

         ##### BP_BY_CHROM != all #####
         else
            # Get head of vcf
            cat $(ls "$GVCF_RAW"/"$ALIGNER"_"$CALLER"/"$ALIGNER"_"$CALLER"_*_raw.vcf | head -1) | grep "^#" > "$GVCF_RAW"/"$ALIGNER"_"$CALLER"/"$ALIGNER"_"$CALLER"_raw.vcf
            wait
 
            # Join vcfs
            for position in $(cat $CHROM_POSITIONS); do
               grep -v '^#' "$GVCF_RAW"/"$ALIGNER"_"$CALLER"/"$ALIGNER"_"$CALLER"_"${position}"_raw.vcf >> "$GVCF_RAW"/"$ALIGNER"_"$CALLER"/"$ALIGNER"_"$CALLER"_raw.vcf
            done
            wait
            
            # Index vcf
            bgzip -f -@ $THREADS "$GVCF_RAW"/"$ALIGNER"_"$CALLER"/"$ALIGNER"_"$CALLER"_raw.vcf
            bcftools index -f -t --threads $THREADS "$GVCF_RAW"/"$ALIGNER"_"$CALLER"/"$ALIGNER"_"$CALLER"_raw.vcf.gz
            wait
            
            
            if [[ $(bcftools view -H "$GVCF_RAW"/"$ALIGNER"_"$CALLER"/"$ALIGNER"_"$CALLER"_raw.vcf.gz | head -n 1000 | wc -l) == 0 ]]; then
               rm -r "$GVCF_RAW"/"$ALIGNER"_"$CALLER"/"$ALIGNER"_"$CALLER"_raw.vcf.gz*
               
            else
               mv "$GVCF_RAW"/"$ALIGNER"_"$CALLER"/"$ALIGNER"_"$CALLER"_raw.vcf* $VCF_RAW
               rm -r "$GVCF_RAW"/"$ALIGNER"_"$CALLER"/"$ALIGNER"_"$CALLER"_*_raw.vcf* 2> /dev/null
               wait
            
               # Add rsIDs to VCF 
               if [[ "$VARIANTS" != "none" ]]; then
                  D=$(date "+%D    %T")
                  echo "# Add rsIDs: $D #"
                  bcftools annotate --threads $THREADS -a $VARIANTS -c ID -Oz -o $VCF_RAW/"$ALIGNER"_"$CALLER"_raw_tmp.vcf.gz $VCF_RAW/"$ALIGNER"_"$CALLER"_raw.vcf.gz
                  mv $VCF_RAW/"$ALIGNER"_"$CALLER"_raw_tmp.vcf.gz $VCF_RAW/"$ALIGNER"_"$CALLER"_raw.vcf.gz
                  bcftools index -f -t --threads $THREADS $VCF_RAW/"$ALIGNER"_"$CALLER"_raw.vcf.gz
               fi
               wait
   
               # Add chrom:pos to missing IDs
               D=$(date "+%D    %T")
               echo "# Add chrom:pos to missing IDs: $D #"
               bcftools annotate --threads $THREADS --set-id +'%CHROM\:%POS' \
               -Oz -o $VCF_RAW/"$ALIGNER"_"$CALLER"_raw_tmp.vcf.gz \
               $VCF_RAW/"$ALIGNER"_"$CALLER"_raw.vcf.gz
               mv $VCF_RAW/"$ALIGNER"_"$CALLER"_raw_tmp.vcf.gz $VCF_RAW/"$ALIGNER"_"$CALLER"_raw.vcf.gz
               bcftools index -f -t --threads $THREADS $VCF_RAW/"$ALIGNER"_"$CALLER"_raw.vcf.gz 2> /dev/null
               wait
               
              # Annotation with snpEff
              if [[ "$ANNOTATION" != "none" ]]; then
                 D=$(date "+%D    %T")
                 echo "# Annotation with snpEff: $D #"
                 $IVDP_DIR/program/08.vcf_annotation/snpEff_vcf.sh > /dev/null 2>&1
              fi
              wait
              
            fi
         fi
      fi
   done
done
wait

###################################
######## STATISTICS RAW VCF #######
###################################
D=$(date "+%D    %T")
echo
echo "STATISTICS OF RAW VCF FILES: $D"
for ALIGNER in $ALIGNER_PROGRAM; do
   export ALIGNER=$ALIGNER
   
   for CALLER in $CALLER_PROGRAM; do
      export CALLER=$CALLER
      echo $CALLER
      source "$IVDP_DIR"/program/01.general_steps/folders.sh
      mkdir -p "$STATS_VCF_RAW" > /dev/null 2>&1
      mkdir -p "$REPORT_VCF_RAW" > /dev/null 2>&1
	  
	  plink2 --vcf $VCF_RAW/"$ALIGNER"_"$CALLER"_raw.vcf.gz \
	  --chr-set $CHROM_SET no-xy no-mt \
      --snps-only \
      --min-alleles 2 \
      --max-alleles 2 \
      --set-missing-var-ids @:# \
      --freq --missing --keep-allele-order --const-fid 0 \
      --out $STATS_VCF_RAW/"$ALIGNER"_"$CALLER" > /dev/null 2>&1 
      wait
      
      plink --vcf $VCF_RAW/"$ALIGNER"_"$CALLER"_raw.vcf.gz \
      --chr-set $CHROM_SET no-xy no-mt \
      --snps-only --biallelic-only \
      --set-missing-var-ids @:# \
      --het --keep-allele-order --const-fid 0 \
      --out $STATS_VCF_RAW/"$ALIGNER"_"$CALLER" > /dev/null 2>&1 
      wait
      
      rm -r $STATS_VCF_RAW/*.log 2> /dev/null
      rm -r $STATS_VCF_RAW/*.nosex 2> /dev/null
      wait

      for chrom in $(cat $CHROM_NAME); do 
         bcftools stats --threads $THREADS -r $chrom $VCF_RAW/"$ALIGNER"_"$CALLER"_raw.vcf.gz > $TMP/rawVCF_"$ALIGNER"_"$CALLER"_chrom"$chrom".stats & 
      done
      wait
      rm $TMP/rawVCF_"$ALIGNER"_"$CALLER".stats 2> /dev/null
      for chrom in $(cat $CHROM_NAME); do
         echo -e $chrom "\t" snp "\t" $(grep -w "number of SNPs:" $TMP/rawVCF_"$ALIGNER"_"$CALLER"_chrom"$chrom".stats | awk -F":" '{print $2}' | sed "s/[[:space:]]\+//g") >> $TMP/rawVCF_"$ALIGNER"_"$CALLER".stats
         echo -e $chrom "\t" indel "\t" $(grep -w "number of indels:" $TMP/rawVCF_"$ALIGNER"_"$CALLER"_chrom"$chrom".stats | awk -F":" '{print $2}' | sed "s/[[:space:]]\+//g") >> $TMP/rawVCF_"$ALIGNER"_"$CALLER".stats
      done
      wait
      unset chrom
   
      Rscript -e "inputPath=\"${STATS_VCF_RAW}\";aligner=\"${ALIGNER}\";caller=\"${CALLER}\";step=\"rawVCF\";chromNames=\"${CHROM_NAME}\";file1=\"${TMP}/rawVCF_${ALIGNER}_${CALLER}.stats\";file2=\"$STATS_VCF_RAW/${ALIGNER}_${CALLER}.afreq\";file3=\"$STATS_VCF_RAW/${ALIGNER}_${CALLER}.vmiss\";file4=\"$STATS_VCF_RAW/${ALIGNER}_${CALLER}.smiss\";file5=\"$STATS_VCF_RAW/${ALIGNER}_${CALLER}.het\";source(\"$IVDP_DIR/program/01.general_steps/plot_vcf_stats.R\")"
      wait
      bcftools query -f '%CHROM\t%POS\t%CHROM:%POS\n' $VCF_RAW/"$ALIGNER"_"$CALLER"_raw.vcf.gz > $VCF_RAW/"$ALIGNER"_"$CALLER"_raw.pos
      wait
      Rscript -e "inputFile=\"$VCF_RAW/${ALIGNER}_${CALLER}_raw.pos\";aligner=\"${ALIGNER}\";caller=\"${CALLER}\";outputPath=\"$STATS_VCF_RAW\";source(\"$IVDP_DIR/program/01.general_steps/plot_snpDensity.R\")"
      wait
      mv $STATS_VCF_RAW/Col1.Col0.SNP-Density.plot_DensitySNPs_"$ALIGNER"_"$CALLER".pdf $STATS_VCF_RAW/plot_DensitySNPs_"$ALIGNER"_"$CALLER"_raw.pdf
      wait
   
      gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -dAutoRotatePages=/None -sOutputFile=$REPORT_VCF_RAW/plot_stats_"$ALIGNER"_"$CALLER"_raw.pdf $STATS_VCF_RAW/plot_stats_"$ALIGNER"_"$CALLER"_page1.pdf $STATS_VCF_RAW/plot_DensitySNPs_"$ALIGNER"_"$CALLER"_raw.pdf $STATS_VCF_RAW/plot_stats_"$ALIGNER"_"$CALLER"_page2.pdf $STATS_VCF_RAW/plot_stats_"$ALIGNER"_"$CALLER"_page3.pdf
      wait
      rm $STATS_VCF_RAW/plot_DensitySNPs_"$ALIGNER"_"$CALLER"_raw.pdf $STATS_VCF_RAW/plot_stats_"$ALIGNER"_"$CALLER"_page* $STATS_VCF_RAW/Rplots.pdf $VCF_RAW/"$ALIGNER"_"$CALLER"_raw.pos 2> /dev/null
      wait

      bcftools stats $VCF_RAW/"$ALIGNER"_"$CALLER"_raw.vcf.gz > $STATS_VCF_RAW/"$ALIGNER"_"$CALLER".stats
      wait
      
      #plot-vcfstats -P -p $STATS_VCF_RAW/plot/"$ALIGNER"_"$CALLER" -t "$ALIGNER"_"$CALLER" $STATS_VCF_RAW/"$ALIGNER"_"$CALLER".stats 2>/dev/null
      #mv $STATS_VCF_RAW/plot/"$ALIGNER"_"$CALLER"/depth.0.png $STATS_VCF_RAW/plot/"$ALIGNER"_"$CALLER"_depth.png 2>/dev/null
      #mv $STATS_VCF_RAW/plot/"$ALIGNER"_"$CALLER"/indels.0.png $STATS_VCF_RAW/plot/"$ALIGNER"_"$CALLER"_indels.png 2>/dev/null
      #mv $STATS_VCF_RAW/plot/"$ALIGNER"_"$CALLER"/substitutions.0.png $STATS_VCF_RAW/plot/"$ALIGNER"_"$CALLER"_substitutions.png 2>/dev/null
      #mv $STATS_VCF_RAW/plot/"$ALIGNER"_"$CALLER"/tstv_by_qual.0.png $STATS_VCF_RAW/plot/"$ALIGNER"_"$CALLER"_tstv_by_qual.png 2>/dev/null
      #rm -r $STATS_VCF_RAW/plot/"$ALIGNER"_"$CALLER" 2>/dev/null
      #wait
     
   done
done
wait

multiqc -f -n report_vcf_raw.html "$STATS_VCF_RAW"/*.stats -o "$REPORT_VCF_RAW" > /dev/null 2>&1
echo
wait


END_IVDP=$(date +%s)
DIFF_IVDP=$(( $END_IVDP - $START_IVDP ))

echo
echo "#@ Concatenate VCFs took $(printf '%dh:%dm:%ds\n' $(($DIFF_IVDP/3600)) $(($DIFF_IVDP%3600/60)) $(($DIFF_IVDP%60)))"
echo "#@#############################################################"


